type: output
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 135
    length: 104
    placeholder_text: |-
      #  TODO заменить на метод
              if not isinstance(capacity_volume, (int, float)):
                  raise TypeError
              if not capacity_volume > 0:
                  raise ValueError
              self.capacity_volume = capacity_volume  # объем стакана
    initial_state:
      length: 240
      offset: 144
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      #  TODO заменить на метод
              if not isinstance(capacity_volume, (int, float)):
                  raise TypeError
              if not capacity_volume > 0:
                  raise ValueError
              self.capacity_volume = capacity_volume  # объем стакана
  - offset: 464
    length: 71
    placeholder_text: "#  TODO создать метод, который будет инициализировать атриб\
      ут capacity_volume"
    initial_state:
      length: 77
      offset: 609
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "#  TODO создать метод, который будет инициализиров\
      ать атрибут capacity_volume"
  - offset: 819
    length: 31
    placeholder_text: "...  # TODO инициализировать экземпляр класса Glass"
    initial_state:
      length: 51
      offset: 720
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...  # TODO инициализировать экземпляр класса Glass"
  - offset: 861
    length: 80
    placeholder_text: "...)  # TODO распечатать атрибут capacity_volume"
    initial_state:
      length: 48
      offset: 782
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...)  # TODO распечатать атрибут capacity_volume"
  - offset: 952
    length: 80
    placeholder_text: "...)  # TODO распечатать атрибут occupied_volume"
    initial_state:
      length: 48
      offset: 841
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...)  # TODO распечатать атрибут occupied_volume"
  text: |
    from typing import Union


    class Glass:
        def __init__(self, capacity_volume: Union[int, float], occupied_volume: Union[int, float]):
            #  TODO заменить на метод
            if not isinstance(capacity_volume, (int, float)):
                raise TypeError
            if not capacity_volume > 0:
                raise ValueError
            self.capacity_volume = capacity_volume  # объем стакана

            if not isinstance(occupied_volume, (int, float)):
                raise TypeError
            if occupied_volume < 0:
                raise ValueError
            self.occupied_volume = occupied_volume  # объем жидкости в стакане

    #  TODO создать метод, который будет инициализировать атрибут capacity_volume


    if __name__ == "__main__":
        ...  # TODO инициализировать экземпляр класса Glass
        print(...)  # TODO распечатать атрибут capacity_volume
        print(...)  # TODO распечатать атрибут occupied_volume
  learner_created: false
- name: tests/output.txt
  visible: false
  text: |
    200
    100
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 04 Jun 2023 18:33:28 UTC"
record: -1
