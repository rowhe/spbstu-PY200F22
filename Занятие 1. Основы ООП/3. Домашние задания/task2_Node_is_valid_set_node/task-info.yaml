type: output
files:
- name: tests/output.txt
  visible: false
  text: |
    Node(1, Node(2, None))
    Node(2, None)
  learner_created: false
- name: task.py
  visible: true
  placeholders:
  - offset: 439
    length: 63
    placeholder_text: '# TODO установить значение следующего узла с помощью метода
      set_next'
    initial_state:
      length: 68
      offset: 399
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO установить значение следующего узла с помощью
      метода set_next'
  - offset: 637
    length: 155
    placeholder_text: |-
      # TODO метод проверки корректности связываемого узла
              ...
    initial_state:
      length: 64
      offset: 601
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      # TODO метод проверки корректности связываемого узла
              ...
  - offset: 865
    length: 163
    placeholder_text: |-
      # TODO метод должен проверять корректность узла и устанавливать значение атрибуту next
              ...
    initial_state:
      length: 98
      offset: 739
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      # TODO метод должен проверять корректность узла и устанавливать значение атрибуту next
              ...
  - offset: 1061
    length: 103
    placeholder_text: '# TODO инициализируйте два узла с любыми значеними'
    initial_state:
      length: 50
      offset: 871
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO инициализируйте два узла с любыми значеними'
  - offset: 1170
    length: 68
    placeholder_text: '# TODO свяжите первый узел со вторым'
    initial_state:
      length: 36
      offset: 927
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO свяжите первый узел со вторым'
  text: |
    from typing import Any, Optional


    class Node:
        """ Класс, который описывает узел связного списка. """

        def __init__(self, value: Any, next_: Optional["Node"] = None):
            """
            Создаем новый узел для односвязного списка
            :param value: Любое значение, которое помещено в узел
            :param next_: следующий узел, если он есть
            """
            self.value = value

            # TODO установить значение следующего узла с помощью метода set_next

        def __repr__(self) -> str:
            return f"Node({self.value}, {self.next})"

        def is_valid(self, node: Any) -> None:
           # TODO метод проверки корректности связываемого узла
            ...

        def set_next(self, next_: Optional["Node"] = None) -> None:
            # TODO метод должен проверять корректность узла и устанавливать значение атрибуту next
            ...


    if __name__ == '__main__':
        # TODO инициализируйте два узла с любыми значеними

        # TODO свяжите первый узел со вторым

        print(first_node)
        print(second_node)
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 13 Jun 2023 13:17:59 UTC
record: -1
